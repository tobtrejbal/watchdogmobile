// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SENSORVALUEFB_WATCHDOG_H_
#define FLATBUFFERS_GENERATED_SENSORVALUEFB_WATCHDOG_H_

#include "../flatbuffers.h"


namespace watchdog {

struct SensorValueFB;

struct SensorValueFB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t sensorId() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::Vector<float> *sensorValues() const { return GetPointer<const flatbuffers::Vector<float> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* sensorId */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* sensorValues */) &&
           verifier.Verify(sensorValues()) &&
           verifier.EndTable();
  }
};

struct SensorValueFBBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sensorId(int32_t sensorId) { fbb_.AddElement<int32_t>(4, sensorId, 0); }
  void add_sensorValues(flatbuffers::Offset<flatbuffers::Vector<float>> sensorValues) { fbb_.AddOffset(6, sensorValues); }
  SensorValueFBBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SensorValueFBBuilder &operator=(const SensorValueFBBuilder &);
  flatbuffers::Offset<SensorValueFB> Finish() {
    auto o = flatbuffers::Offset<SensorValueFB>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SensorValueFB> CreateSensorValueFB(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t sensorId = 0,
   flatbuffers::Offset<flatbuffers::Vector<float>> sensorValues = 0) {
  SensorValueFBBuilder builder_(_fbb);
  builder_.add_sensorValues(sensorValues);
  builder_.add_sensorId(sensorId);
  return builder_.Finish();
}

}  // namespace watchdog

#endif  // FLATBUFFERS_GENERATED_SENSORVALUEFB_WATCHDOG_H_
