// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SAMPLEFB_WATCHDOG_H_
#define FLATBUFFERS_GENERATED_SAMPLEFB_WATCHDOG_H_

#include "../flatbuffers.h"

namespace watchdog {
struct SensorValueFB;
}  // namespace watchdog

namespace watchdog {

struct SampleFB;

struct SampleFB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int64_t date() const { return GetField<int64_t>(4, 0); }
  int32_t batteryLevel() const { return GetField<int32_t>(6, 0); }
  double lat() const { return GetField<double>(8, 0); }
  double lon() const { return GetField<double>(10, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<watchdog::SensorValueFB>> *sensorValues() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<watchdog::SensorValueFB>> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, 4 /* date */) &&
           VerifyField<int32_t>(verifier, 6 /* batteryLevel */) &&
           VerifyField<double>(verifier, 8 /* lat */) &&
           VerifyField<double>(verifier, 10 /* lon */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* sensorValues */) &&
           verifier.Verify(sensorValues()) &&
           verifier.VerifyVectorOfTables(sensorValues()) &&
           verifier.EndTable();
  }
};

struct SampleFBBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_date(int64_t date) { fbb_.AddElement<int64_t>(4, date, 0); }
  void add_batteryLevel(int32_t batteryLevel) { fbb_.AddElement<int32_t>(6, batteryLevel, 0); }
  void add_lat(double lat) { fbb_.AddElement<double>(8, lat, 0); }
  void add_lon(double lon) { fbb_.AddElement<double>(10, lon, 0); }
  void add_sensorValues(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<watchdog::SensorValueFB>>> sensorValues) { fbb_.AddOffset(12, sensorValues); }
  SampleFBBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SampleFBBuilder &operator=(const SampleFBBuilder &);
  flatbuffers::Offset<SampleFB> Finish() {
    auto o = flatbuffers::Offset<SampleFB>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<SampleFB> CreateSampleFB(flatbuffers::FlatBufferBuilder &_fbb,
   int64_t date = 0,
   int32_t batteryLevel = 0,
   double lat = 0,
   double lon = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<watchdog::SensorValueFB>>> sensorValues = 0) {
  SampleFBBuilder builder_(_fbb);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_date(date);
  builder_.add_sensorValues(sensorValues);
  builder_.add_batteryLevel(batteryLevel);
  return builder_.Finish();
}

}  // namespace watchdog

#endif  // FLATBUFFERS_GENERATED_SAMPLEFB_WATCHDOG_H_
